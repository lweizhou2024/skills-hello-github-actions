% --- Input data ---
% Assume you have time, load, disp as column vectors of equal length
% e.g. loaded from a file:
% data = readmatrix('testdata.csv');
% time = data(:,1);
% load = data(:,2);
% disp = data(:,3);

% --- Smooth the load signal to reduce noise ---
smoothLoad = smooth(load, 51); % adjust window size as needed

% --- Compute load rate (derivative) ---
dLoad = gradient(smoothLoad, time);

% --- Normalize to help thresholding ---
dLoadNorm = dLoad / max(abs(dLoad));

% --- Identify loading, holding, unloading based on slope ---
% Threshold for "nearly flat" region (holding)
th_flat = 0.02; % smaller = more sensitive; tune for your noise level

% Logical masks
isLoading   = dLoadNorm >  th_flat;
isUnloading = dLoadNorm < -th_flat;
isHolding   = abs(dLoadNorm) <= th_flat;

% --- Find transition points ---
idx_load_end = find(diff(isLoading)==-1, 1, 'first');  % loading -> hold
idx_hold_end = find(diff(isHolding)==-1, 1, 'first');  % hold -> unload

t_load_end = time(idx_load_end);
t_hold_end = time(idx_hold_end);

fprintf('Loading stops / holding starts at t = %.3f s\n', t_load_end);
fprintf('Holding stops / unloading starts at t = %.3f s\n', t_hold_end);

% --- Find midpoint indices for loading and unloading ---
idx_load_mid = round(find(isLoading, 1, 'first') + (idx_load_end - find(isLoading, 1, 'first'))/2);
idx_unload_start = find(isUnloading, 1, 'first');
idx_unload_end = find(isUnloading, 1, 'last');
idx_unload_mid = round(idx_unload_start + (idx_unload_end - idx_unload_start)/2);

% --- Calculate stiffness (ΔLoad / ΔDisp) between the midpoints ---
k_load = (smoothLoad(idx_load_end) - smoothLoad(1)) / ...
         (disp(idx_load_end) - disp(1));

k_unload = (smoothLoad(idx_unload_end) - smoothLoad(idx_hold_end)) / ...
           (disp(idx_unload_end) - disp(idx_hold_end));

% Or simply using the midpoints:
k_loading_mid  = smoothLoad(idx_load_mid)  / disp(idx_load_mid);
k_unloading_mid = smoothLoad(idx_unload_mid) / disp(idx_unload_mid);

fprintf('Approx. stiffness during loading  = %.3f (load/disp units)\n', k_loading_mid);
fprintf('Approx. stiffness during unloading = %.3f (load/disp units)\n', k_unloading_mid);

% --- Optional visualization ---
figure;
yyaxis left
plot(time, load, 'b-', 'DisplayName', 'Load'); hold on;
yyaxis right
plot(time, disp, 'r-', 'DisplayName', 'Displacement');
yyaxis left
plot(time, smoothLoad, 'k--', 'DisplayName', 'Smoothed Load');
xline(t_load_end, '--g', 'Load→Hold');
xline(t_hold_end, '--m', 'Hold→Unload');
xlabel('Time'); ylabel('Load / Displacement');
legend show; grid on;
title('Load-Displacement-Time with Stage Detection');

https://fltech-my.sharepoint.com/:f:/g/personal/phsu_fit_edu/Ep2qV4OXAIFLgfDAreo0iI8B4AuSam0D-qb0NNLphrja5g?e=fb7C11

https://app.box.com/s/neampykuf24jgztzge80tgav021c1a1r
