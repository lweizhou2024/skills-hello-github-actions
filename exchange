function createPlotWithSlider()
% This function creates a plot with a panning slider that updates continuously,
% ensuring listener persistence using guidata.

% Create some sample data
x = 0:0.1:10;
y = sin(x);

% Create a figure and axes
fig = figure('CloseRequestFcn', @myCloseReqFcn); % Add a CloseRequestFcn for cleanup
ax = axes('Parent', fig, 'Position', [0.1 0.2 0.8 0.7]);
plot(ax, x, y);
title('Plot with X-Axis Panning Slider (Continuous Update)');

% Set initial x-axis limits
xmin_initial = min(x);
xmax_initial = max(x);
xlim(ax, [xmin_initial xmax_initial]);

% Get the initial width of the displayed x-axis
current_xlim_width = xmax_initial - xmin_initial;

% Define the full range of your data for the slider's min and max
data_min_x = min(x);
data_max_x = max(x);

% The slider's minimum value should be the absolute minimum of your data
slider_min_val = data_min_x;

% The slider's maximum value should be the point where the left edge of the
% viewable window is such that the right edge of the window aligns with data_max_x.
slider_max_val = data_max_x - current_xlim_width;

if slider_max_val < slider_min_val
    slider_max_val = slider_min_val; % Disables panning if viewable window is full data range
end

% Set the initial value of the slider to the current xmin
slider_initial_value = xmin_initial;

% Calculate the slider step.
slider_range = slider_max_val - slider_min_val;

if slider_range == 0
    minor_step = 0.1;
    major_step = 0.1;
else
    minor_step = (current_xlim_width / 100) / slider_range;
    major_step = (current_xlim_width / 10) / slider_range;

    minor_step = max(0, min(1, minor_step));
    major_step = max(0, min(1, major_step));
    if minor_step > major_step
        major_step = minor_step;
    end
    if minor_step == 0 && slider_range > 0
        minor_step = 0.001;
    end
    if major_step == 0 && slider_range > 0
        major_step = 0.01;
    end
end

% Define the position of the slider [left bottom width height]
slider_position = [0.1 0.05 0.8 0.05];

sld = uicontrol('Parent', fig, ...
    'Style', 'slider', ...
    'Units', 'normalized', ...
    'Position', slider_position, ...
    'min', slider_min_val, ...
    'max', slider_max_val, ...
    'Value', slider_initial_value, ...
    'SliderStep', [minor_step major_step]);

% --- Store necessary handles and data in the figure's guidata ---
% This makes 'ax' and 'current_xlim_width' accessible to any callback
% associated with this figure.
handles.ax = ax;
handles.sld = sld; % Store slider handle too, though not strictly needed for this specific callback
handles.current_xlim_width = current_xlim_width;
guidata(fig, handles); % Store the 'handles' structure in the figure's guidata

% --- Add the listener for continuous updates ---
% The callback now takes the figure handle as its first argument
% so it can retrieve the stored data using guidata.
listener = addlistener(sld, 'Value', 'PostSet', @(es, ed) updateXlimCallback(fig, es.Value));

% --- Important: Store the listener object itself ---
% If the listener object is not stored, it will also be cleared from memory
% and the listener will stop working! Store it in the figure's guidata.
handles.listener = listener;
guidata(fig, handles); % Update guidata with the listener handle

% Nested callback function (or a separate helper function)
% It takes the figure handle and the slider value
function updateXlimCallback(hFig, new_xmin_val)
    % Retrieve the stored handles and data from the figure
    data = guidata(hFig);
    ax_handle = data.ax;
    window_width = data.current_xlim_width;

    new_xmax = new_xmin_val + window_width;
    xlim(ax_handle, [new_xmin_val new_xmax]);
end

% Function to clean up when the figure is closed
function myCloseReqFcn(src,~)
    % Get the stored handles and listener object
    data = guidata(src);
    if isfield(data, 'listener') && isvalid(data.listener)
        delete(data.listener); % Delete the listener object
    end
    delete(src); % Close the figure
end

end % End of main function
