% ScreenCapture_Optris_fixed.m
% Reliable full-screen capture using Java Robot and getRGB

% --- user settings ---
outputFile = 'screen_capture.mp4';   % output video filename
numFrames = 30;                      % total frames to capture
captureInterval = 10;                % seconds between captures (your RAVI rate)
videoFrameRate = 1;                  % playback rate in output video (1 frame/sec)
startDelay = 10;                     % seconds to wait before first capture
% ----------------------

disp('Starting screen capture (using Java Robot) ...');
disp(['Waiting ', num2str(startDelay), ' seconds so you can start PIX playback...']);
pause(startDelay);

% Create video writer
v = VideoWriter(outputFile, 'MPEG-4');
v.FrameRate = videoFrameRate;
open(v);

% Get screen size (for multi-monitor, this gives virtual screen)
set(0,'Units','pixels');
screenSize = get(0,'ScreenSize');   % [left bottom width height]
width = screenSize(3);
height = screenSize(4);

% create Java Robot and rectangle
robot = java.awt.Robot();
rect = java.awt.Rectangle(width, height);

for i = 1:numFrames
    % capture
    img = robot.createScreenCapture(rect);   % java.awt.image.BufferedImage

    % dimensions
    w = int32(img.getWidth());
    h = int32(img.getHeight());

    % getRGB returns an int32 java array of length w*h (packed ARGB)
    % The MATLAB int conversion yields a column vector of length w*h
    rgbInts = typecast(img.getRGB(0,0,w,h,zeros(1,w*h,'int32'),0,w),'int32'); 
    % In some MATLAB/JVM combos img.getRGB(...) already returns a MATLAB array:
    if isempty(rgbInts)
        % fallback: directly call and convert
        rgbJava = img.getRGB(0,0,w,h,[],0,w); % java array
        rgbInts = zeros(1,w*h,'int32');
        for k = 1:length(rgbJava)
            rgbInts(k) = int32(rgbJava(k));
        end
    end

    % extract channels from packed ARGB: bits 16-23 R, 8-15 G, 0-7 B
    % Use bit operations (works even if values are signed)
    rVals = bitand(bitshift(rgbInts, -16), 255);
    gVals = bitand(bitshift(rgbInts, -8), 255);
    bVals = bitand(rgbInts, 255);

    % reshape to 2D (column-major). rgbInts is row-major order from getRGB:
    % We need to reshape into (w x h) and then transpose to (h x w)
    R = reshape(uint8(rVals), [w, h])';
    G = reshape(uint8(gVals), [w, h])';
    B = reshape(uint8(bVals), [w, h])';

    frame = cat(3, R, G, B);  % h x w x 3

    % write to video
    writeVideo(v, frame);
    disp(['Captured frame ', num2str(i), ' of ', num2str(numFrames)]);

    if i < numFrames
        pause(captureInterval);
    end
end

close(v);

% Notify user: sound + message box
disp(['Done! Video saved as ', outputFile]);
try
    load handel;
    sound(y, Fs);
catch
    % ignore if no sound data
end
msgbox(sprintf('Screen capture complete!\nFile: %s\nFrames: %d\nInterval: %g s', ...
    outputFile, numFrames, captureInterval), 'Done');

