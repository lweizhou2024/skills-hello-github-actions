from odbAccess import openOdb
import numpy as np
import csv

# --------- USER SETTINGS ---------
odb_path = 'Job-1.odb'          # Path to your ODB file
step_name = 'Step-1'            # Name of the step
output_csv = 'crack_tip.csv'    # Output CSV file
crack_direction = 0             # 0=x, 1=y, 2=z, adjust to your crack growth
# ---------------------------------

odb = openOdb(odb_path)
step = odb.steps[step_name]

tip_positions = []

# Loop over all frames in the step
for frame in step.frames:
    # Get PHILSM field
    philsm = frame.fieldOutputs['PHILSM']
    
    # Gather node coordinates and PHILSM values
    node_data = []
    for value in philsm.values:
        coord = value.instance.nodes[value.nodeLabel-1].coordinates
        node_data.append((value.data, coord))
    
    # Filter nodes near the crack surface (PHILSM ~ 0)
    tol = 1e-6  # adjust tolerance if needed
    crack_nodes = [coord for phi, coord in node_data if abs(phi) < tol]
    
    if crack_nodes:
        # Assume crack grows along a primary axis; pick farthest node
        tip_node = max(crack_nodes, key=lambda c: c[crack_direction])
        tip_positions.append((frame.frameValue, tip_node))
    else:
        # No crack at this frame
        tip_positions.append((frame.frameValue, (np.nan, np.nan, np.nan)))

odb.close()

# Write to CSV
with open(output_csv, 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(['Time', 'X', 'Y', 'Z'])
    for t, pos in tip_positions:
        writer.writerow([t, pos[0], pos[1], pos[2]])

print(f'Crack tip coordinates exported to {output_csv}')
