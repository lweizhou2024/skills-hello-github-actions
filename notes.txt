# --- node set extraction for tuple-structured sets ---
def get_node_set(assembly, name):
    if name in assembly.nodeSets:
        return assembly.nodeSets[name]
    for instName, inst in assembly.instances.items():
        if name in inst.nodeSets:
            return inst.nodeSets[name]
    return None

nodeSet = get_node_set(root_assembly, node_set_name)
if nodeSet is None:
    print('Node set "%s" not found in assembly or instances.' % node_set_name)
    odb.close()
    sys.exit(1)

nodes_coords = {}
node_labels = set()

def add_nodes(seq):
    for n in seq:
        try:
            xy = np.array(n.coordinates[:2])
            nodes_coords[n.label] = xy
            node_labels.add(n.label)
        except:
            pass

nodes_obj = nodeSet.nodes

# Case 1: direct list or tuple of MeshNode
if len(nodes_obj) > 0 and hasattr(nodes_obj[0], "label"):
    add_nodes(nodes_obj)

# Case 2: tuple of (instanceName, nodeList)
elif len(nodes_obj) > 0 and isinstance(nodes_obj[0], tuple):
    for item in nodes_obj:
        if isinstance(item, tuple) and len(item) == 2:
            inst_name, node_seq = item
            add_nodes(node_seq)

# Case 3: dictionary of instanceName -> node sequence
elif isinstance(nodes_obj, dict):
    for inst_name, node_seq in nodes_obj.items():
        add_nodes(node_seq)

if len(nodes_coords) == 0:
    print('Could not extract any node coordinates from node set "%s".' % node_set_name)
    print('First entry of nodeSet.nodes:', nodes_obj[0])
    odb.close()
    sys.exit(1)

print('Collected %d nodes from node set "%s".' % (len(nodes_coords), node_set_name))
